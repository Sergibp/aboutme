{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink');\n    effects.enter('labelMarker');\n    effects.consume(code);\n    effects.exit('labelMarker');\n    effects.exit('labelLink');\n    return after;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","map":{"version":3,"names":["labelEnd","labelStartLink","name","tokenize","tokenizeLabelStartLink","resolveAll","effects","ok","nok","self","start","code","enter","consume","exit","after","parser","constructs"],"sources":["/Users/iClon/Desktop/sergio/dev-portfolio/node_modules/micromark-core-commonmark/lib/label-start-link.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,QAAQ,QAAO,gBAAgB;;AAEvC;AACA,OAAO,MAAMC,cAAc,GAAG;EAC5BC,IAAI,EAAE,gBAAgB;EACtBC,QAAQ,EAAEC,sBAAsB;EAChCC,UAAU,EAAEL,QAAQ,CAACK;AACvB,CAAC;;AAED;AACA;AACA;AACA;AACA,SAASD,sBAAsBA,CAACE,OAAO,EAAEC,EAAE,EAAEC,GAAG,EAAE;EAChD,MAAMC,IAAI,GAAG,IAAI;EACjB,OAAOC,KAAK;;EAEZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASA,KAAKA,CAACC,IAAI,EAAE;IACnBL,OAAO,CAACM,KAAK,CAAC,WAAW,CAAC;IAC1BN,OAAO,CAACM,KAAK,CAAC,aAAa,CAAC;IAC5BN,OAAO,CAACO,OAAO,CAACF,IAAI,CAAC;IACrBL,OAAO,CAACQ,IAAI,CAAC,aAAa,CAAC;IAC3BR,OAAO,CAACQ,IAAI,CAAC,WAAW,CAAC;IACzB,OAAOC,KAAK;EACd;;EAEA;EACA,SAASA,KAAKA,CAACJ,IAAI,EAAE;IACnB;IACA;IACA;IACA;IACA,OAAOA,IAAI,KAAK,EAAE,IAAI,wBAAwB,IAAIF,IAAI,CAACO,MAAM,CAACC,UAAU,GACpET,GAAG,CAACG,IAAI,CAAC,GACTJ,EAAE,CAACI,IAAI,CAAC;EACd;AACF"},"metadata":{},"sourceType":"module"}