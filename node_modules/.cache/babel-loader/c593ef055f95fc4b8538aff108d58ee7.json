{"ast":null,"code":"/**\n * @typedef {import('mdast').List} List\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport { wrap } from '../wrap.js';\nimport { all } from '../traverse.js';\n\n/**\n * @type {Handler}\n * @param {List} node\n * @returns {Element}\n */\nexport function list(h, node) {\n  /** @type {Properties} */\n  const props = {};\n  const name = node.ordered ? 'ol' : 'ul';\n  const items = all(h, node);\n  let index = -1;\n  if (typeof node.start === 'number' && node.start !== 1) {\n    props.start = node.start;\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < items.length) {\n    const item = items[index];\n    if (item.type === 'element' && item.tagName === 'li' && item.properties && Array.isArray(item.properties.className) && item.properties.className.includes('task-list-item')) {\n      props.className = ['contains-task-list'];\n      break;\n    }\n  }\n  return h(node, name, props, wrap(items, true));\n}","map":{"version":3,"names":["wrap","all","list","h","node","props","name","ordered","items","index","start","length","item","type","tagName","properties","Array","isArray","className","includes"],"sources":["/Users/iClon/Documents/GitHub/aboutme/node_modules/mdast-util-to-hast/lib/handlers/list.js"],"sourcesContent":["/**\n * @typedef {import('mdast').List} List\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {wrap} from '../wrap.js'\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {List} node\n * @returns {Element}\n */\nexport function list(h, node) {\n  /** @type {Properties} */\n  const props = {}\n  const name = node.ordered ? 'ol' : 'ul'\n  const items = all(h, node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    props.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < items.length) {\n    const item = items[index]\n\n    if (\n      item.type === 'element' &&\n      item.tagName === 'li' &&\n      item.properties &&\n      Array.isArray(item.properties.className) &&\n      item.properties.className.includes('task-list-item')\n    ) {\n      props.className = ['contains-task-list']\n      break\n    }\n  }\n\n  return h(node, name, props, wrap(items, true))\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,IAAI,QAAO,YAAY;AAC/B,SAAQC,GAAG,QAAO,gBAAgB;;AAElC;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,IAAIA,CAACC,CAAC,EAAEC,IAAI,EAAE;EAC5B;EACA,MAAMC,KAAK,GAAG,CAAC,CAAC;EAChB,MAAMC,IAAI,GAAGF,IAAI,CAACG,OAAO,GAAG,IAAI,GAAG,IAAI;EACvC,MAAMC,KAAK,GAAGP,GAAG,CAACE,CAAC,EAAEC,IAAI,CAAC;EAC1B,IAAIK,KAAK,GAAG,CAAC,CAAC;EAEd,IAAI,OAAOL,IAAI,CAACM,KAAK,KAAK,QAAQ,IAAIN,IAAI,CAACM,KAAK,KAAK,CAAC,EAAE;IACtDL,KAAK,CAACK,KAAK,GAAGN,IAAI,CAACM,KAAK;EAC1B;;EAEA;EACA,OAAO,EAAED,KAAK,GAAGD,KAAK,CAACG,MAAM,EAAE;IAC7B,MAAMC,IAAI,GAAGJ,KAAK,CAACC,KAAK,CAAC;IAEzB,IACEG,IAAI,CAACC,IAAI,KAAK,SAAS,IACvBD,IAAI,CAACE,OAAO,KAAK,IAAI,IACrBF,IAAI,CAACG,UAAU,IACfC,KAAK,CAACC,OAAO,CAACL,IAAI,CAACG,UAAU,CAACG,SAAS,CAAC,IACxCN,IAAI,CAACG,UAAU,CAACG,SAAS,CAACC,QAAQ,CAAC,gBAAgB,CAAC,EACpD;MACAd,KAAK,CAACa,SAAS,GAAG,CAAC,oBAAoB,CAAC;MACxC;IACF;EACF;EAEA,OAAOf,CAAC,CAACC,IAAI,EAAEE,IAAI,EAAED,KAAK,EAAEL,IAAI,CAACQ,KAAK,EAAE,IAAI,CAAC,CAAC;AAChD"},"metadata":{},"sourceType":"module"}