{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Parse labels.\n *\n * > ðŸ‘‰ **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this;\n  let size = 0;\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type);\n    effects.enter(markerType);\n    effects.consume(code);\n    effects.exit(markerType);\n    effects.enter(stringType);\n    return atBreak;\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (size > 999 || code === null || code === 91 || code === 93 && !seen ||\n    // To do: remove in the future once weâ€™ve switched from\n    // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n    // which doesnâ€™t need this.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    code === 94 && !size && '_hiddenFootnoteSupport' in self.parser.constructs) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit(stringType);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding');\n      effects.consume(code);\n      effects.exit('lineEnding');\n      return atBreak;\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    });\n    return labelInside(code);\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (code === null || code === 91 || code === 93 || markdownLineEnding(code) || size++ > 999) {\n      effects.exit('chunkString');\n      return atBreak(code);\n    }\n    effects.consume(code);\n    if (!seen) seen = !markdownSpace(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n}","map":{"version":3,"names":["markdownLineEnding","markdownSpace","factoryLabel","effects","ok","nok","type","markerType","stringType","self","size","seen","start","code","enter","consume","exit","atBreak","parser","constructs","contentType","labelInside","labelEscape"],"sources":["/Users/iClon/Documents/GitHub/aboutme/node_modules/micromark-factory-label/index.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > ðŸ‘‰ **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once weâ€™ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesnâ€™t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}