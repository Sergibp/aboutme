{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g;\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1;\n  let buffer = '';\n  /** @type {boolean | undefined} */\n  let start = true;\n  /** @type {boolean | undefined} */\n  let atCarriageReturn;\n  return preprocessor;\n\n  /** @type {Preprocessor} */\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = [];\n    /** @type {RegExpMatchArray | null} */\n    let match;\n    /** @type {number} */\n    let next;\n    /** @type {number} */\n    let startPosition;\n    /** @type {number} */\n    let endPosition;\n    /** @type {Code} */\n    let code;\n\n    // @ts-expect-error `Buffer` does allow an encoding.\n    value = buffer + value.toString(encoding);\n    startPosition = 0;\n    buffer = '';\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++;\n      }\n      start = undefined;\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition;\n      match = search.exec(value);\n      endPosition = match && match.index !== undefined ? match.index : value.length;\n      code = value.charCodeAt(endPosition);\n      if (!match) {\n        buffer = value.slice(startPosition);\n        break;\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3);\n        atCarriageReturn = undefined;\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5);\n          atCarriageReturn = undefined;\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition));\n          column += endPosition - startPosition;\n        }\n        switch (code) {\n          case 0:\n            {\n              chunks.push(65533);\n              column++;\n              break;\n            }\n          case 9:\n            {\n              next = Math.ceil(column / 4) * 4;\n              chunks.push(-2);\n              while (column++ < next) chunks.push(-1);\n              break;\n            }\n          case 10:\n            {\n              chunks.push(-4);\n              column = 1;\n              break;\n            }\n          default:\n            {\n              atCarriageReturn = true;\n              column = 1;\n            }\n        }\n      }\n      startPosition = endPosition + 1;\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5);\n      if (buffer) chunks.push(buffer);\n      chunks.push(null);\n    }\n    return chunks;\n  }\n}","map":{"version":3,"names":["search","preprocess","column","buffer","start","atCarriageReturn","preprocessor","value","encoding","end","chunks","match","next","startPosition","endPosition","code","toString","charCodeAt","undefined","length","lastIndex","exec","index","slice","push","Math","ceil"],"sources":["/Users/iClon/Desktop/sergio/dev-portfolio/node_modules/micromark/lib/preprocess.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n\n    // @ts-expect-error `Buffer` does allow an encoding.\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}