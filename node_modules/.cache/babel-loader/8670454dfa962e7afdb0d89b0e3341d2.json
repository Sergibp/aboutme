{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport { asciiControl, markdownLineEndingOrSpace, markdownLineEnding } from 'micromark-util-character';\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(effects, ok, nok, type, literalType, literalMarkerType, rawType, stringType, max) {\n  const limit = max || Number.POSITIVE_INFINITY;\n  let balance = 0;\n  return start;\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type);\n      effects.enter(literalType);\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      return enclosedBefore;\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.enter(type);\n    effects.enter(rawType);\n    effects.enter(stringType);\n    effects.enter('chunkString', {\n      contentType: 'string'\n    });\n    return raw(code);\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      effects.exit(literalType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    effects.enter('chunkString', {\n      contentType: 'string'\n    });\n    return enclosed(code);\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString');\n      effects.exit(stringType);\n      return enclosedBefore(code);\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? enclosedEscape : enclosed;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code);\n      return enclosed;\n    }\n    return enclosed(code);\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (!balance && (code === null || code === 41 || markdownLineEndingOrSpace(code))) {\n      effects.exit('chunkString');\n      effects.exit(stringType);\n      effects.exit(rawType);\n      effects.exit(type);\n      return ok(code);\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code);\n      balance++;\n      return raw;\n    }\n    if (code === 41) {\n      effects.consume(code);\n      balance--;\n      return raw;\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? rawEscape : raw;\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code);\n      return raw;\n    }\n    return raw(code);\n  }\n}","map":{"version":3,"names":["asciiControl","markdownLineEndingOrSpace","markdownLineEnding","factoryDestination","effects","ok","nok","type","literalType","literalMarkerType","rawType","stringType","max","limit","Number","POSITIVE_INFINITY","balance","start","code","enter","consume","exit","enclosedBefore","contentType","raw","enclosed","enclosedEscape","rawEscape"],"sources":["/Users/iClon/Desktop/sergio/dev-portfolio/node_modules/micromark-factory-destination/index.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}